# üê≥ Agentic AI System - Docker Compose Configuration
# Complete development and production environment setup
# Made with ‚ù§Ô∏è by Mulky Malikul Dhaher in Indonesia üáÆüá©

version: '3.8'

services:
  # Main Agentic AI System
  agentic-ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-2.0.0}
        COMMIT_SHA: ${COMMIT_SHA:-unknown}
    container_name: agentic-ai-system
    restart: unless-stopped
    ports:
      - "5000:5000"  # Web interface
      - "8765:8765"  # WebSocket
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DATABASE_URL=postgresql://agentic:${POSTGRES_PASSWORD:-agentic123}@postgres:5432/agentic_db
      - REDIS_URL=redis://redis:6379/0
      - LLM7_API_KEY=${LLM7_API_KEY:-llm7-free-api-key}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - WEB_INTERFACE_HOST=0.0.0.0
      - WEB_INTERFACE_PORT=5000
      - ENABLE_SCHEDULER=true
      - ENABLE_SYNC_ENGINE=true
      - ENABLE_WEB_INTERFACE=true
    volumes:
      - agentic_data:/app/data
      - agentic_logs:/app/logs
      - agentic_projects:/app/projects
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agentic-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agentic_db
      - POSTGRES_USER=agentic
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-agentic123}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - agentic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentic -d agentic_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agentic-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - agentic_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: agentic-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - agentic_logs:/var/log/nginx
    depends_on:
      - agentic-ai
    networks:
      - agentic_network
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: agentic-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - agentic_network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agentic-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - agentic_network
    profiles:
      - monitoring

  # ElasticSearch for Log Analysis
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: agentic-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - agentic_network
    profiles:
      - logging

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: agentic-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - agentic_network
    profiles:
      - logging

  # Development Tools Container
  dev-tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: agentic-dev-tools
    volumes:
      - .:/app
      - agentic_data:/app/data
      - agentic_logs:/app/logs
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://agentic:${POSTGRES_PASSWORD:-agentic123}@postgres:5432/agentic_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    networks:
      - agentic_network
    profiles:
      - development
    command: /bin/bash

# Named Volumes
volumes:
  agentic_data:
    driver: local
  agentic_logs:
    driver: local
  agentic_projects:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Networks
networks:
  agentic_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
